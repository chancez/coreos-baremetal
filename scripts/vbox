#!/bin/bash
# Manage VM nodes which have a specific set of hardware attributes.

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${DIR}/common.sh"

: ${VBOX_NET:=vboxnet0}

function main {
  local arg="$1"
  shift
  case "$arg" in
    "create") create "$@";;
    "start") start "headless" "$@";;
    "start-gui") start "gui" "$@";;
    "reboot") reboot "$@";;
    "reboot-disk") reboot_disk "$@";;
    "reboot-net") reboot_net "$@";;
    "shutdown") shutdown "$@";;
    "poweroff") poweroff "$@";;
    "destroy") destroy "$@";;
    *)
      usage
      exit 2
      ;;
  esac
}

function usage {
  echo "USAGE: ${0##*/} <command>"
  echo "Commands:"
  echo -e "\tcreate\tcreate virtualbox nodes"
  echo -e "\tstart\tstart virtualbox nodes"
  echo -e "\tstart-gui\tstart virtualbox nodes and show Virtualbox GUI"
  echo -e "\treboot\t\treboot the virtualbox nodes"
  echo -e "\treboot-disk\t\treboot the virtualbox nodes using disk as first priority for boot"
  echo -e "\treboot-net\t\treboot the virtualbox nodes using net as first priority for boot"
  echo -e "\tshutdown\tshutdown the virtualbox nodes"
  echo -e "\tpoweroff\tpoweroff the virtualbox nodes"
  echo -e "\tdestroy\t\tdestroy the virtualbox nodes"
}

nodes=(node1 node2 node3 node4)

function vboxmanagewrapper {
    $DIR/vboxmanage $@
}

function create_node {
  NODE=$(echo $1 | awk '{print toupper($0)}')
  eval "NODE_NAME"="\$${NODE}_NAME"
  eval "NODE_UUID"="\$${NODE}_UUID"
  eval "NODE_MAC"="\$${NODE}_MAC"
  vboxmanagewrapper create_vm "$NODE_NAME" "$NODE_UUID" "$NODE_MAC" "$VBOX_NET"
}

function create {
    local node_list="${nodes[@]}"
    if [ "$#" != "0" ]; then
        node_list="$@"
    fi

    for node in ${node_list[@]}; do
        echo "creating $node"
        create_node $node
    done
}

function start {
    local start_type="$1"
    shift

    local node_list="${nodes[@]}"
    if [ "$#" != "0" ]; then
        node_list="$@"
    fi

    for node in ${node_list[@]}; do
        echo "starting $node"
        vboxmanagewrapper start_vm $node $start_type
    done
}

function reboot {
    local node_list="${nodes[@]}"
    if [ "$#" != "0" ]; then
        node_list="$@"
    fi

    for node in ${node_list[@]}; do
        echo "rebooting $node"
        vboxmanagewrapper reboot_vm $node
    done
}

function reboot_net {
    local node_list="${nodes[@]}"
    if [ "$#" != "0" ]; then
        node_list="$@"
    fi

    for node in ${node_list[@]}; do
        echo "rebooting $node"
        vboxmanagewrapper reboot_vm_net $node
    done
}

function reboot_disk {
    local node_list="${nodes[@]}"
    if [ "$#" != "0" ]; then
        node_list="$@"
    fi

    for node in ${node_list[@]}; do
        echo "rebooting $node"
        vboxmanagewrapper reboot_vm_disk $node
    done
}

function shutdown {
    local node_list="${nodes[@]}"
    if [ "$#" != "0" ]; then
        node_list="$@"
    fi

    for node in ${node_list[@]}; do
        echo "shutting down $node"
        vboxmanagewrapper shutdown_vm $node
    done
}

function poweroff {
    local node_list="${nodes[@]}"
    if [ "$#" != "0" ]; then
        node_list="$@"
    fi

    for node in ${node_list[@]}; do
        echo "powering off $node"
        vboxmanagewrapper poweroff_vm $node
    done
}

function destroy {
    local node_list="${nodes[@]}"
    if [ "$#" != "0" ]; then
        node_list="$@"
    fi

    for node in ${node_list[@]}; do
        echo "destroying $node"
        vboxmanagewrapper destroy_vm "$node"
    done
}

main $@

